{
	"info": {
		"_postman_id": "2293a5f6-65a1-4fc9-ae36-44501eacfbe9",
		"name": "General_API_Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24559603",
		"_collection_link": "https://orange-capsule-955654.postman.co/workspace/API-Testing~6f2c79a7-e666-4039-b2a0-e85e25b8b467/collection/24559603-2293a5f6-65a1-4fc9-ae36-44501eacfbe9?action=share&source=collection_link&creator=24559603"
	},
	"item": [
		{
			"name": "Data API with out Variables",
			"item": [
				{
					"name": "Get Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is within the range of 200-299\", function () {\r",
									"  pm.expect(pm.response.code).to.be.within(200, 299);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code text is OK\", function () {\r",
									"   pm.expect(pm.response.status).to.equal('OK');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function() {\r",
									"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the response is an object with specific properties\", function () {\r",
									"    pm.response.json().forEach(function(item) {\r",
									"        pm.expect(item).to.be.an('object').that.has.all.keys('id', 'name', 'username', 'email', 'address', 'phone', 'website', 'company');\r",
									"        pm.expect(item.address).to.be.an('object').that.has.all.keys('street', 'suite', 'city', 'zipcode', 'geo');\r",
									"        pm.expect(item.address.geo).to.be.an('object').that.has.all.keys('lat', 'lng');\r",
									"        pm.expect(item.company).to.be.an('object').that.has.all.keys('name', 'catchPhrase', 'bs');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Phone number data type is valid\", function () {\r",
									"    pm.response.json().forEach(function(item) {\r",
									"        pm.expect(item.phone).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"username\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"email\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"address\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"street\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"suite\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"city\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"zipcode\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"geo\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"lat\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"lng\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"lat\",\r",
									"                \"lng\"\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"street\",\r",
									"            \"suite\",\r",
									"            \"city\",\r",
									"            \"zipcode\",\r",
									"            \"geo\"\r",
									"          ]\r",
									"        },\r",
									"        \"phone\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"website\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"company\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"catchPhrase\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"bs\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"name\",\r",
									"            \"catchPhrase\",\r",
									"            \"bs\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"        \"username\",\r",
									"        \"email\",\r",
									"        \"address\",\r",
									"        \"phone\",\r",
									"        \"website\",\r",
									"        \"company\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"};\r",
									"\r",
									"// Now we can give the validation part\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.expect(tv4.validateMultiple(jsonData, schema).valid).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/data",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is within the range of 200-299\", function () {\r",
									"  pm.expect(pm.response.code).to.be.within(200, 299);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code text is Created\", function () {\r",
									"   pm.expect(pm.response.status).to.equal('Created');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function() {\r",
									"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"id\": \"4\",\r\n      \"name\": \"Durga Sai\",\r\n      \"username\": \"Durga\",\r\n      \"email\": \"durga@april.biz\",\r\n      \"address\": {\r\n        \"street\": \"Depluy street\",\r\n        \"suite\": \"Apt. 210\",\r\n        \"city\": \"India\",\r\n        \"zipcode\": \"92898-6739\",\r\n        \"geo\": {\r\n          \"lat\": \"-37.2059\",\r\n          \"lng\": \"81.8906\"\r\n        }\r\n      },\r\n      \"phone\": \"1-770-736-7542 x56442\",\r\n      \"website\": \"linkedin.org\",\r\n      \"company\": {\r\n        \"name\": \"Indian-Crona\",\r\n        \"catchPhrase\": \"Multi-layered client-server neural-net\",\r\n        \"bs\": \"harness real-time e-markets\"\r\n      }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/data",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is within the range of 200-299\", function () {\r",
									"  pm.expect(pm.response.code).to.be.within(200, 299);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code text is OK\", function () {\r",
									"   pm.expect(pm.response.status).to.equal('OK');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function() {\r",
									"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"name\": \"Durasoftware Solutions\",\r\n      \"username\": \"Durga Soft\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/data/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"data",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is within the range of 200-299\", function () {\r",
									"  pm.expect(pm.response.code).to.be.within(200, 299);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code text is OK\", function () {\r",
									"   pm.expect(pm.response.status).to.equal('OK');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function() {\r",
									"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 10ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(15);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/data/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"data",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Data API with Local Variables",
			"item": [
				{
					"name": "Get Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is within the range of 200-299\", function () {\r",
									"  pm.expect(pm.response.code).to.be.within(200, 299);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code text is OK\", function () {\r",
									"   pm.expect(pm.response.status).to.equal('OK');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function() {\r",
									"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the response is an object with specific properties\", function () {\r",
									"    pm.response.json().forEach(function(item) {\r",
									"        pm.expect(item).to.be.an('object').that.has.all.keys('id', 'name', 'username', 'email', 'address', 'phone', 'website', 'company');\r",
									"        pm.expect(item.address).to.be.an('object').that.has.all.keys('street', 'suite', 'city', 'zipcode', 'geo');\r",
									"        pm.expect(item.address.geo).to.be.an('object').that.has.all.keys('lat', 'lng');\r",
									"        pm.expect(item.company).to.be.an('object').that.has.all.keys('name', 'catchPhrase', 'bs');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Phone number data type is valid\", function () {\r",
									"    pm.response.json().forEach(function(item) {\r",
									"        pm.expect(item.phone).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"username\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"email\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"address\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"street\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"suite\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"city\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"zipcode\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"geo\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"lat\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"lng\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"lat\",\r",
									"                \"lng\"\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"street\",\r",
									"            \"suite\",\r",
									"            \"city\",\r",
									"            \"zipcode\",\r",
									"            \"geo\"\r",
									"          ]\r",
									"        },\r",
									"        \"phone\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"website\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"company\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"catchPhrase\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"bs\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"name\",\r",
									"            \"catchPhrase\",\r",
									"            \"bs\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"        \"username\",\r",
									"        \"email\",\r",
									"        \"address\",\r",
									"        \"phone\",\r",
									"        \"website\",\r",
									"        \"company\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"};\r",
									"\r",
									"// Now we can give the validation part\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.expect(tv4.validateMultiple(jsonData, schema).valid).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"URL_Local\", \"http://localhost:3000/data\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL_Local}}",
							"host": [
								"{{URL_Local}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is within the range of 200-299\", function () {\r",
									"  pm.expect(pm.response.code).to.be.within(200, 299);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code text is Created\", function () {\r",
									"   pm.expect(pm.response.status).to.equal('Created');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function() {\r",
									"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"id\": \"4\",\r\n      \"name\": \"Durga Sai\",\r\n      \"username\": \"Durga\",\r\n      \"email\": \"durga@april.biz\",\r\n      \"address\": {\r\n        \"street\": \"Depluy street\",\r\n        \"suite\": \"Apt. 210\",\r\n        \"city\": \"India\",\r\n        \"zipcode\": \"92898-6739\",\r\n        \"geo\": {\r\n          \"lat\": \"-37.2059\",\r\n          \"lng\": \"81.8906\"\r\n        }\r\n      },\r\n      \"phone\": \"1-770-736-7542 x56442\",\r\n      \"website\": \"linkedin.org\",\r\n      \"company\": {\r\n        \"name\": \"Indian-Crona\",\r\n        \"catchPhrase\": \"Multi-layered client-server neural-net\",\r\n        \"bs\": \"harness real-time e-markets\"\r\n      }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/data",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is within the range of 200-299\", function () {\r",
									"  pm.expect(pm.response.code).to.be.within(200, 299);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code text is OK\", function () {\r",
									"   pm.expect(pm.response.status).to.equal('OK');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function() {\r",
									"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"name\": \"Durasoftware Solutions\",\r\n      \"username\": \"Durga Soft\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/data/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"data",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is within the range of 200-299\", function () {\r",
									"  pm.expect(pm.response.code).to.be.within(200, 299);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code text is OK\", function () {\r",
									"   pm.expect(pm.response.status).to.equal('OK');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function() {\r",
									"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 10ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(15);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/data/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"data",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Data API with Global Variables",
			"item": [
				{
					"name": "Get Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is within the range of 200-299\", function () {\r",
									"  pm.expect(pm.response.code).to.be.within(200, 299);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code text is OK\", function () {\r",
									"   pm.expect(pm.response.status).to.equal('OK');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function() {\r",
									"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the response is an object with specific properties\", function () {\r",
									"    pm.response.json().forEach(function(item) {\r",
									"        pm.expect(item).to.be.an('object').that.has.all.keys('id', 'name', 'username', 'email', 'address', 'phone', 'website', 'company');\r",
									"        pm.expect(item.address).to.be.an('object').that.has.all.keys('street', 'suite', 'city', 'zipcode', 'geo');\r",
									"        pm.expect(item.address.geo).to.be.an('object').that.has.all.keys('lat', 'lng');\r",
									"        pm.expect(item.company).to.be.an('object').that.has.all.keys('name', 'catchPhrase', 'bs');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Phone number data type is valid\", function () {\r",
									"    pm.response.json().forEach(function(item) {\r",
									"        pm.expect(item.phone).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"username\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"email\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"address\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"street\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"suite\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"city\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"zipcode\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"geo\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"lat\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"lng\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"lat\",\r",
									"                \"lng\"\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"street\",\r",
									"            \"suite\",\r",
									"            \"city\",\r",
									"            \"zipcode\",\r",
									"            \"geo\"\r",
									"          ]\r",
									"        },\r",
									"        \"phone\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"website\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"company\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"catchPhrase\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"bs\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"name\",\r",
									"            \"catchPhrase\",\r",
									"            \"bs\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"        \"username\",\r",
									"        \"email\",\r",
									"        \"address\",\r",
									"        \"phone\",\r",
									"        \"website\",\r",
									"        \"company\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"};\r",
									"\r",
									"// Now we can give the validation part\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.expect(tv4.validateMultiple(jsonData, schema).valid).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL_GLOBAL}}",
							"host": [
								"{{URL_GLOBAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is within the range of 200-299\", function () {\r",
									"  pm.expect(pm.response.code).to.be.within(200, 299);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code text is Created\", function () {\r",
									"   pm.expect(pm.response.status).to.equal('Created');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function() {\r",
									"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"id\": \"4\",\r\n      \"name\": \"Durga Sai\",\r\n      \"username\": \"Durga\",\r\n      \"email\": \"durga@april.biz\",\r\n      \"address\": {\r\n        \"street\": \"Depluy street\",\r\n        \"suite\": \"Apt. 210\",\r\n        \"city\": \"India\",\r\n        \"zipcode\": \"92898-6739\",\r\n        \"geo\": {\r\n          \"lat\": \"-37.2059\",\r\n          \"lng\": \"81.8906\"\r\n        }\r\n      },\r\n      \"phone\": \"1-770-736-7542 x56442\",\r\n      \"website\": \"linkedin.org\",\r\n      \"company\": {\r\n        \"name\": \"Indian-Crona\",\r\n        \"catchPhrase\": \"Multi-layered client-server neural-net\",\r\n        \"bs\": \"harness real-time e-markets\"\r\n      }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL_GLOBAL}}",
							"host": [
								"{{URL_GLOBAL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is within the range of 200-299\", function () {\r",
									"  pm.expect(pm.response.code).to.be.within(200, 299);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code text is OK\", function () {\r",
									"   pm.expect(pm.response.status).to.equal('OK');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function() {\r",
									"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"name\": \"Durasoftware Solutions\",\r\n      \"username\": \"Durga Soft\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL_GLOBAL}}/4",
							"host": [
								"{{URL_GLOBAL}}"
							],
							"path": [
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is within the range of 200-299\", function () {\r",
									"  pm.expect(pm.response.code).to.be.within(200, 299);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code text is OK\", function () {\r",
									"   pm.expect(pm.response.status).to.equal('OK');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function() {\r",
									"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 10ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(15);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL_GLOBAL}}/4",
							"host": [
								"{{URL_GLOBAL}}"
							],
							"path": [
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Data API with Collection Variables",
			"item": [
				{
					"name": "Get Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is within the range of 200-299\", function () {\r",
									"  pm.expect(pm.response.code).to.be.within(200, 299);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code text is OK\", function () {\r",
									"   pm.expect(pm.response.status).to.equal('OK');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function() {\r",
									"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the response is an object with specific properties\", function () {\r",
									"    pm.response.json().forEach(function(item) {\r",
									"        pm.expect(item).to.be.an('object').that.has.all.keys('id', 'name', 'username', 'email', 'address', 'phone', 'website', 'company');\r",
									"        pm.expect(item.address).to.be.an('object').that.has.all.keys('street', 'suite', 'city', 'zipcode', 'geo');\r",
									"        pm.expect(item.address.geo).to.be.an('object').that.has.all.keys('lat', 'lng');\r",
									"        pm.expect(item.company).to.be.an('object').that.has.all.keys('name', 'catchPhrase', 'bs');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Phone number data type is valid\", function () {\r",
									"    pm.response.json().forEach(function(item) {\r",
									"        pm.expect(item.phone).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"username\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"email\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"address\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"street\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"suite\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"city\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"zipcode\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"geo\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"lat\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"lng\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"lat\",\r",
									"                \"lng\"\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"street\",\r",
									"            \"suite\",\r",
									"            \"city\",\r",
									"            \"zipcode\",\r",
									"            \"geo\"\r",
									"          ]\r",
									"        },\r",
									"        \"phone\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"website\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"company\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"catchPhrase\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"bs\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"name\",\r",
									"            \"catchPhrase\",\r",
									"            \"bs\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"        \"username\",\r",
									"        \"email\",\r",
									"        \"address\",\r",
									"        \"phone\",\r",
									"        \"website\",\r",
									"        \"company\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"};\r",
									"\r",
									"// Now we can give the validation part\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    pm.expect(tv4.validateMultiple(jsonData, schema).valid).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL_Collection}}",
							"host": [
								"{{URL_Collection}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is within the range of 200-299\", function () {\r",
									"  pm.expect(pm.response.code).to.be.within(200, 299);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code text is Created\", function () {\r",
									"   pm.expect(pm.response.status).to.equal('Created');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function() {\r",
									"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"id\": \"4\",\r\n      \"name\": \"Durga Sai\",\r\n      \"username\": \"Durga\",\r\n      \"email\": \"durga@april.biz\",\r\n      \"address\": {\r\n        \"street\": \"Depluy street\",\r\n        \"suite\": \"Apt. 210\",\r\n        \"city\": \"India\",\r\n        \"zipcode\": \"92898-6739\",\r\n        \"geo\": {\r\n          \"lat\": \"-37.2059\",\r\n          \"lng\": \"81.8906\"\r\n        }\r\n      },\r\n      \"phone\": \"1-770-736-7542 x56442\",\r\n      \"website\": \"linkedin.org\",\r\n      \"company\": {\r\n        \"name\": \"Indian-Crona\",\r\n        \"catchPhrase\": \"Multi-layered client-server neural-net\",\r\n        \"bs\": \"harness real-time e-markets\"\r\n      }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL_Collection}}",
							"host": [
								"{{URL_Collection}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is within the range of 200-299\", function () {\r",
									"  pm.expect(pm.response.code).to.be.within(200, 299);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code text is OK\", function () {\r",
									"   pm.expect(pm.response.status).to.equal('OK');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function() {\r",
									"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"name\": \"Durasoftware Solutions\",\r\n      \"username\": \"Durga Soft\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL_Collection}}/4",
							"host": [
								"{{URL_Collection}}"
							],
							"path": [
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is within the range of 200-299\", function () {\r",
									"  pm.expect(pm.response.code).to.be.within(200, 299);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code text is OK\", function () {\r",
									"   pm.expect(pm.response.status).to.equal('OK');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function() {\r",
									"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 10ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(15);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL_Collection}}/4",
							"host": [
								"{{URL_Collection}}"
							],
							"path": [
								"4"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"console.log(\"Tests Completed\");"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "URL_Collection",
			"value": "http://localhost:3000/data",
			"type": "string"
		}
	]
}